package com.dashboardinventory.models;

import java.time.LocalDateTime;
import java.util.List;

import com.dashboardinventory.enums.UserRole;
import com.dashboardinventory.security.AuthUser;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "users")
@Data
@Builder
public class User {

	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@NotBlank(message = "Name is required")
	private String name;
	
	@Column(unique = true)
	@NotBlank(message = "Email is required")
	private String email;
	
	@NotBlank(message = "Password is required")
	private String password;
	
	@NotBlank(message = "PhoneNumber is required")
	@Column(name = "phone_number")
	private String phoneNumber;
	
	@Enumerated(EnumType.STRING)
	@Column(nullable = false)
	private UserRole role;
	
	@Enumerated(EnumType.STRING)
	private List<Transaction> transactions;
	
	 @Column(name = "created_at")
	private final LocalDateTime createdAt = LocalDateTime.now();
	
	
	 @Override
	    public String toString() {
	        return "User{" +
	                "id=" + id +
	                ", name='" + name + '\'' +
	                ", email='" + email + '\'' +
	                ", password='" + password + '\'' +
	                ", phoneNumber='" + phoneNumber + '\'' +
	                ", role=" + role +
	                ", createdAt=" + createdAt +
	                '}';
	    }
	 
	//getter and setter
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	public UserRole getRole() {
		return role;
	}
	public void setRole(UserRole role) {
		this.role = role;
	}
	public List<Transaction> getTransactions() {
		return transactions;
	}
	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}
	public LocalDateTime getCreatedAt() {
		return createdAt;
	}
	
	//Arg const
	
	public User() {}
	public User(Long id, String name, String email, String password, String phoneNumber, UserRole role,
			List<Transaction> transactions) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
		this.password = password;
		this.phoneNumber = phoneNumber;
		this.role = role;
		this.transactions = transactions;
	};
	
	// Manual Builder class
		public static class Builder {
			private Long id;
			private String name;
			private String email;
			private String password;
			private String phoneNumber;
			private UserRole role;
			private List<Transaction> transactions;

			public Builder id(Long id) {
				this.id = id;
				return this;
			}

			public Builder name(String name) {
				this.name = name;
				return this;
			}

			public Builder email(String email) {
				this.email = email;
				return this;
			}

			public Builder password(String password) {
				this.password = password;
				return this;
			}

			public Builder phoneNumber(String phoneNumber) {
				this.phoneNumber = phoneNumber;
				return this;
			}

			public Builder role(UserRole role) {
				this.role = role;
				return this;
			}

			public Builder transactions(List<Transaction> transactions) {
				this.transactions = transactions;
				return this;
			}

			public User build() {
				return new User(id, name, email, password, phoneNumber, role, transactions);
			}
		}
		
		public static Builder builder() {
	        return new Builder();
	    }
	



}
